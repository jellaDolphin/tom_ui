; This file is used to build setup.iss which is then fed to the Inno Setup compiler
; The variables used below come from the CMakeLists.txt

#if ${CMAKE_SIZEOF_VOID_P} == 8
  #define ARCH "x86_64"
#else
  #define ARCH "x86"
#endif

[Setup]
AppId                = {{174A4547-917E-4BAF-9F25-FCE545CCD487}
AppName              = "${PROJECT_NAME}"
AppVersion           = "${PROJECT_VERSION}"
AppPublisher         = "${PROJECT_AUTHOR}"
DefaultDirName       = "{pf}\${PROJECT_NAME}"
DefaultGroupName     = "${PROJECT_NAME}"
LicenseFile          = "${CMAKE_SOURCE_DIR}\LICENSE.txt"
MinVersion           = 6.0
OutputDir            = "${CMAKE_BINARY_DIR}"
OutputBaseFilename   = "nitroshare-${PROJECT_VERSION}-windows-{#ARCH}"
Compression          = lzma
SolidCompression     = yes
WizardImageFile      = "${CMAKE_CURRENT_SOURCE_DIR}\wizard-image.bmp"
WizardSmallImageFile = "${CMAKE_CURRENT_SOURCE_DIR}\wizard-small-image.bmp"

; Set two additional directives if we are building a 64-bit installer
#if ARCH == "x86_64"
ArchitecturesAllowed            = x64
ArchitecturesInstallIn64BitMode = x64
#endif

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "{#PREFIX}\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs

[Icons]
Name: "{group}\${PROJECT_NAME}"; Filename: "{app}\${INSTALL_BIN_PATH}\nitroshare-ui.exe"
Name: "{group}\{cm:UninstallProgram,${PROJECT_NAME}}"; Filename: "{uninstallexe}"
Name: "{commondesktop}\${PROJECT_NAME}"; Filename: "{app}\${INSTALL_BIN_PATH}\nitroshare-ui.exe"; Tasks: desktopicon

[Run]
Filename: "{app}\${INSTALL_BIN_PATH}\nitroshare-ui.exe"; Description: "{cm:LaunchProgram,${PROJECT_NAME}}"; Flags: nowait postinstall skipifsilent

[Code]

// The code below is adapted from
// http://www.vincenzo.net/isxkb/index.php?title=Adding_a_rule_to_the_Windows_firewall

procedure CurStepChanged(CurStep: TSetupStep);
var
  ResultCode: Integer;
  FirewallManager: Variant;
  FirewallProfile: Variant;
  FirewallObject: Variant;
begin
  if CurStep = ssPostInstall then
    if not Exec('regsvr32', ExpandConstant('/s "{app}\${INSTALL_BIN_PATH}\nitroshell.dll"'), '', 0, ewWaitUntilTerminated, ResultCode) then
      SuppressibleMsgBox('Unable to register shell extension.', mbError, MB_OK, MB_OK);
    try
      FirewallManager := CreateOleObject('HNetCfg.FwMgr');
      FirewallProfile := FirewallManager.LocalPolicy.CurrentProfile;
      FirewallObject := CreateOleObject('HNetCfg.FwAuthorizedApplication');
      FirewallObject.Name := '${PROJECT_NAME}';
      FirewallObject.ProcessImageFileName := ExpandConstant('{app}\${INSTALL_BIN_PATH}\nitroshare-ui.exe');
      FirewallProfile.AuthorizedApplications.Add(FirewallObject);
    except
    end;
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
var
  ResultCode: Integer;
  FirewallManager: Variant;
  FirewallProfile: Variant;
begin
  if CurUninstallStep = usUninstall then
    try
      if not Exec('regsvr32', ExpandConstant('/u /s "{app}\${INSTALL_BIN_PATH}\nitroshell.dll"'), '', 0, ewWaitUntilTerminated, ResultCode) then
        SuppressibleMsgBox('Unable to unregister shell extension.', mbError, MB_OK, MB_OK);
      FirewallManager := CreateOleObject('HNetCfg.FwMgr');
      FirewallProfile := FirewallManager.LocalPolicy.CurrentProfile;
      FireWallProfile.AuthorizedApplications.Remove(ExpandConstant('{app}\${INSTALL_BIN_PATH}\nitroshare-ui.exe'));
    except
    end;
end;